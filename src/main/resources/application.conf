my-app {
  routes {
    # If ask takes more time than this to complete the request is failed
    ask-timeout = 5s
  }
}

# didn't  use
//mysqllocal = {
//  driver = "com.mysql.cj.jdbc.Driver"
//  url = "jdbc:mysql://127.0.0.1:3318/trace?useSSL=false&useUnicode=true&characterEncoding=UTF-8"
//  user = "root"
//  password = "root"
//}

akka.http.server.preview.enable-http2 = on


akka.grpc.client {
  "helloworld.GreeterService" {
    host = 127.0.0.1
    port = 8087
  }
}

# kamon start
kamon {
  environment.service = "demo"
  apm.api-key = "1"
  trace.sampler = "always"
}

kamon.instrumentation.akka.http {
  server {
    metrics {
      enabled = yes
    }
    tracing {
      tags {
        url = span
        method = metric
        status-code = metric
        from-context {
          requestID = span
        }
      }
      enabled = yes
      span-metrics = on
    }
    propagation {
      enabled = yes
      channel = default
    }
  }

  client {
    tracing {
      enabled = yes
      span-metrics = on
    }
    propagation {
      enabled = yes
      channel = default
    }
  }
}

kamon.instrumentation.okhttp {

  http-client {

    propagation {
      enabled = no
      channel = "default"
    }

    tracing {
      enabled = no
      span-metrics = on
    }
  }
}

kamon.instrumentation.kafka {
  client.tracing {
    continue-trace-on-consumer = yes
  }
}

kamon.instrumentation.logback {

  # Controls if and how Context data should be copied into the MDC while events
  # are being logged.
  #
  mdc {

    # MDC keys used to store the current trace and span identifiers. These keys
    # will only be copied if there is a non-empty Span in the Context associated
    # with the logged event.
    trace-id-key = "kamonTraceId"
    span-id-key = "kamonSpanId"

    # Enables copying of Context information into the MDC. Please note that if
    # you only want to include certain Context information in your log patterns
    # you are better off by simply using the conversion rules available under
    # the "tools" package. Copying data into the MDC is required only in cases
    # where third-party tooling expects data from the MDC to be extracted.
    #
    copy {

      # Controls whether Context information should be copied into the MDC
      # or not.
      enabled = yes

      # Controls whether Context tags should be copied into the MDC.
      tags = yes

      # Contains the names of all Context entries that should be copied into
      # the MDC.
      entries = []
    }
  }
}

kamon {
  jaeger {

    # Define the host/port where the Jaeger Collector/Agent is listening.
    host = "localhost"
    port = 14268

    # Protocol used to send data to Jaeger. The available options are:
    #   - http: Sends spans using jaeger.thrift over HTTP (collector).
    #   - https: Sends spans using jaeger.thrift over HTTPS (collector).
    #   - udp: Sends spans using jaeger.thrift compact over UDP (agent).
    protocol = http

    # for http and https, this is the full url to be used
    http-url = ${kamon.jaeger.protocol}"://"${kamon.jaeger.host}":"${kamon.jaeger.port}"/api/traces"

    # Enable or disable including tags from kamon.environment as labels
    include-environment-tags = no
  }
}

# ======================================= #
# Kamon-Akka-gRPC Reference Configuration #
# ======================================= #

kanela.modules {
  akka-grpc {
    name = "Akka gRPC Instrumentation"
    description = "Context propagation and tracing for Akka gRPC"
    enabled = yes

    instrumentations = [
      "kamon.instrumentation.akka.grpc.AkkaGrpcServerInstrumentation",
      "kamon.instrumentation.akka.grpc.AkkaGrpcClientInstrumentation"
    ]

    within = [
      "^akka.grpc.internal..*"
    ]
  }
}


kanela.modules {
  redis {
    name = "Redis Instrumentation"
    description = "Provides tracing for Jedis, Lettuce and Rediscala libraries"

    instrumentations = [
      "kamon.instrumentation.jedis.JedisInstrumentation",
      "kamon.instrumentation.lettuce.LettuceInstrumentation",
      "kamon.instrumentation.rediscala.RediscalaInstrumentation",
    ]

    within = [
      "redis.clients.jedis..*",
      "io.lettuce.core..*",
      "redis..*",
    ]
  }
}


# when using multiple clients, the extension will be alphabetical
# e.g. $a, $b, $c.
# so add exclude clauses as needed
kamon.instrumentation.akka.filters {

  actors.trace {
    excludes += "*/user/RedisClient-$a/**"
    excludes += "*/user/RedisClient-$a"
    excludes += "*/user/RedisBlockingClient-$a/**"
    excludes += "*/user/RedisBlockingClient-$a"

  }

//  dispatchers {
//    includes = [
//      "HelloAkkaHttpServer/akka.actor.default-dispatcher",
//      "HelloAkkaHttpServer/akka.actor.internal-dispatcher",
//      "HelloAkkaHttpServer/akka.actor.default-blocking-io-dispatcher"
//    ]
//  }
}

# kamon end
